{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["am4core","am4themes_spiritedaway","am4themes_animated","renderChart","locations","console","log","chart","am4maps","geodata","am4geodata_worldLow","projection","Miller","polygonSeries","series","push","exclude","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","polygon","fillOpacity","states","create","properties","fill","colors","getIndex","imageSeries","mapImages","propertyFields","longitude","latitude","url","circle","createChild","radius","circle2","events","on","event","animateBullet","animate","property","from","to","circleOut","target","object","data","colorSet","initialLocations","next","App","useRef","useState","setLocations","map","item","title","titles","setTitles","useLayoutEffect","current","dispose","className","id","style","width","height","onClick","newLocations","Object","assign","filter","it","includes","forEach","length","fetch","encodeURIComponent","then","response","json","location","geometry","lat","lng","color","refreshMap","value","join","onChange","split","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iTAWAA,IAAiBC,KACjBD,IAAiBE,KAGjB,IAAMC,EAAc,SAACC,GACnBC,QAAQC,IAAI,eAAgBF,GAE5B,IAAIG,EAAQP,IAAe,WAAYQ,KAGvCD,EAAME,QAAUC,IAGhBH,EAAMI,WAAa,IAAIH,IAAoBI,OAG3C,IAAIC,EAAgBN,EAAMO,OAAOC,KAAK,IAAIP,KAG1CK,EAAcG,QAAU,CAAC,MAGzBH,EAAcI,YAAa,EAG3B,IAAIC,EAAkBL,EAAcM,YAAYC,SAChDF,EAAgBG,YAAc,SAC9BH,EAAgBI,QAAQC,YAAc,GAG7BL,EAAgBM,OAAOC,OAAO,SACpCC,WAAWC,KAAOpB,EAAMqB,OAAOC,SAAS,GAG3C,IAAIC,EAAcvB,EAAMO,OAAOC,KAAK,IAAIP,KACxCsB,EAAYC,UAAUX,SAASY,eAAeC,UAAY,YAC1DH,EAAYC,UAAUX,SAASY,eAAeE,SAAW,WACzDJ,EAAYC,UAAUX,SAASC,YAAc,UAC7CS,EAAYC,UAAUX,SAASY,eAAeG,IAAM,MAEpD,IAAIC,EAASN,EAAYC,UAAUX,SAASiB,YAAYrC,KACxDoC,EAAOE,OAAS,EAChBF,EAAOJ,eAAeL,KAAO,QAE7B,IAAIY,EAAUT,EAAYC,UAAUX,SAASiB,YAAYrC,KAoBzD,OAnBAuC,EAAQD,OAAS,EACjBC,EAAQP,eAAeL,KAAO,QAG9BY,EAAQC,OAAOC,GAAG,UAAU,SAASC,IAKrC,SAASC,EAAcP,GACLA,EAAOQ,QAAQ,CAAC,CAAEC,SAAU,QAASC,KAAM,EAAGC,GAAI,GAAK,CAAEF,SAAU,UAAWC,KAAM,EAAGC,GAAI,IAAM,IAAM/C,IAAagD,WAC1HR,OAAOC,GAAG,kBAAkB,SAASC,GAC7CC,EAAcD,EAAMO,OAAOC,WAP7BP,CAAcD,EAAMO,WAYtBnB,EAAYqB,KAAO/C,EAEZG,GAGH6C,EAAW,IAAIpD,IAEfqD,EAAmB,CAAE,CACzB,MAAS,WACT,SAAY,QACZ,UAAa,OACb,MAAQD,EAASE,QAChB,CACD,MAAS,aACT,SAAY,QACZ,UAAa,QACb,MAAQF,EAASE,SAiDJC,MA9Cf,WACE,IAAMhD,EAAQiD,iBAAO,MADR,EAEqBC,mBAASJ,GAF9B,mBAENjD,EAFM,KAEKsD,EAFL,OAGeD,mBAASJ,EAAiBM,KAAI,SAAAC,GAAI,OAAIA,EAAKC,UAH1D,mBAGNC,EAHM,KAGEC,EAHF,KAmCb,OANAC,2BAAgB,WAEd,OADAzD,EAAM0D,QAAU9D,EAAYC,GACrB,WACLG,EAAM0D,QAAQC,aAEf,CAAC9D,IAEA,yBAAK+D,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,GAAG,WAAWC,MAAO,CAACC,MAAO,OAAQC,OAAQ,WAClD,4BAAQC,QAAS,kBAlCN,WACjB,IAAIC,EAAeC,OAAOC,OAAO,GAAIvE,GACrCqE,EAAeA,EAAaG,QAAO,SAAAC,GAAE,OAAIf,EAAOgB,SAASD,EAAGhB,UAE5DC,EAAOiB,SAAQ,SAAAlB,GACLA,EAAMmB,OAAS,IAAMP,EAAad,KAAI,SAAAkB,GAAE,OAAIA,EAAGhB,SAAOiB,SAASjB,IACjEoB,MAAM,kBAAoBC,mBAAmBrB,IACxCsB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJ,GAAwB,IAApBA,EAASJ,OAAb,CACA,IAAIM,EAAWF,EAAS,GAAGG,SAASD,SACpCb,EAAa1D,KAAK,CAAC8C,MAAOA,EAAO3B,SAAUoD,EAASE,IAAKvD,UAAWqD,EAASG,IAAKC,MAAOtC,EAASE,SAClGI,EAAae,UAsBEkB,KAAvB,eACA,8BAAUC,MAAO9B,EAAO+B,KAAK,MAAOC,SAAW,SAAApD,GAAK,OAAIqB,EAAUrB,EAAMO,OAAO2C,MAAMG,MAAM,aCxHjFC,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1G,QAAQ0G,MAAMA,EAAMC,c","file":"static/js/main.f7c3d824.chunk.js","sourcesContent":["import React, {useLayoutEffect, useRef, useState} from 'react';\nimport './App.css';\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4themes_spiritedaway from \"@amcharts/amcharts4/themes/spiritedaway\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\n/* Chart code */\n// Themes begin\nam4core.useTheme(am4themes_spiritedaway);\nam4core.useTheme(am4themes_animated);\n// Themes end\n\nconst renderChart = (locations) => {\n  console.log(\"render chart\", locations)\n  // Create map instance\n  let chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n\n// Set map definition\n  chart.geodata = am4geodata_worldLow;\n\n// Set projection\n  chart.projection = new am4maps.projections.Miller();\n\n// Create map polygon series\n  let polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n\n// Exclude Antartica\n  polygonSeries.exclude = [\"AQ\"];\n\n// Make map load polygon (like country names) data from GeoJSON\n  polygonSeries.useGeodata = true;\n\n// Configure series\n  let polygonTemplate = polygonSeries.mapPolygons.template;\n  polygonTemplate.tooltipText = \"{name}\";\n  polygonTemplate.polygon.fillOpacity = 0.6;\n\n// Create hover state and set alternative fill color\n  let hs = polygonTemplate.states.create(\"hover\");\n  hs.properties.fill = chart.colors.getIndex(0);\n\n// Add image series\n  let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n  imageSeries.mapImages.template.propertyFields.longitude = \"longitude\";\n  imageSeries.mapImages.template.propertyFields.latitude = \"latitude\";\n  imageSeries.mapImages.template.tooltipText = \"{title}\";\n  imageSeries.mapImages.template.propertyFields.url = \"url\";\n\n  let circle = imageSeries.mapImages.template.createChild(am4core.Circle);\n  circle.radius = 3;\n  circle.propertyFields.fill = \"color\";\n\n  let circle2 = imageSeries.mapImages.template.createChild(am4core.Circle);\n  circle2.radius = 3;\n  circle2.propertyFields.fill = \"color\";\n\n\n  circle2.events.on(\"inited\", function(event){\n    animateBullet(event.target);\n  })\n\n\n  function animateBullet(circle) {\n    let animation = circle.animate([{ property: \"scale\", from: 1, to: 5 }, { property: \"opacity\", from: 1, to: 0 }], 1000, am4core.ease.circleOut);\n    animation.events.on(\"animationended\", function(event){\n      animateBullet(event.target.object);\n    })\n  }\n\n\n  imageSeries.data = locations;\n\n  return chart;\n}\n\nconst colorSet = new am4core.ColorSet();\n\nconst initialLocations = [ {\n  \"title\": \"Brussels\",\n  \"latitude\": 50.8371,\n  \"longitude\": 4.3676,\n  \"color\":colorSet.next()\n}, {\n  \"title\": \"Copenhagen\",\n  \"latitude\": 55.6763,\n  \"longitude\": 12.5681,\n  \"color\":colorSet.next()\n} ];\n\nfunction App() {\n  const chart = useRef(null);\n  const [locations, setLocations] = useState(initialLocations)\n  const [titles, setTitles] = useState(initialLocations.map(item => item.title))\n\n  const refreshMap = () => {\n    let newLocations = Object.assign([], locations)\n    newLocations = newLocations.filter(it => titles.includes(it.title))\n\n    titles.forEach(title => {\n          if (title.length > 0 && !newLocations.map(it => it.title).includes(title)) {\n            fetch('/geoCode?query=' + encodeURIComponent(title))\n                .then(response => response.json())\n                .then(response => {\n                  if (response.length === 0) return;\n                  let location = response[0].geometry.location;\n                  newLocations.push({title: title, latitude: location.lat, longitude: location.lng, color: colorSet.next()})\n                  setLocations(newLocations)\n                })\n          }\n        }\n\n    )\n\n    //return {title: it, latitude: location.lat, longitude: location.lng, color: colorSet.next()}\n    //console.log(JSON.stringify(newLocations, null, 2));\n    //setLocations(newLocations)\n  }\n\n  useLayoutEffect(() => {\n    chart.current = renderChart(locations);\n    return () => {\n      chart.current.dispose();\n    };\n  }, [locations]);\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div id=\"chartdiv\" style={{width: \"100%\", height: \"500px\"}}></div>\n          <button onClick={() => refreshMap()}>refresh map</button>\n          <textarea value={titles.join(\"\\n\")} onChange={(event => setTitles(event.target.value.split(\"\\n\"))) }/>\n        </header>\n      </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}